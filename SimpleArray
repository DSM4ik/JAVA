public class SimpleArray<T> implements Iterable<T> {
    private T[] array;
    private int indexArray = 0;

    public SimpleArray(int count) {
        this.array = (T[]) new Object[count];
    }

    public void add(T model) {
        array[indexArray++] = model;
    }

    public void set(int index, T model) {
        int i = Objects.checkIndex(index, indexArray);
        array[i] = model;
    }


    public void remove(int index) {
        int i = Objects.checkIndex(index, indexArray);
        System.arraycopy(array, i + 1, array, i, array.length - i - 1);        
        this.indexArray--;
    }

    private class SimpleArrayIterator<T> implements Iterator<T> {
        private int indx = 0;

        @Override
        public boolean hasNext() {
            return indx < indexArray;
        }

        @Override
        public T next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            return (T) array[indx++];
        }
    }

    @Override
    public Iterator<T> iterator() {
        return new SimpleArrayIterator<T>();
    }

    public static void main(String[] args) {
        SimpleArray<Integer> simpleArray = new SimpleArray<>(6);
        simpleArray.add(4);
        simpleArray.add(6);
        simpleArray.add(3);
        simpleArray.add(8);
        simpleArray.add(2);
        simpleArray.add(1);
        simpleArray.remove(5);
        Iterator<Integer> t = simpleArray.iterator();
        while (t.hasNext()) {
            System.out.println(t.next());
        }
    }
